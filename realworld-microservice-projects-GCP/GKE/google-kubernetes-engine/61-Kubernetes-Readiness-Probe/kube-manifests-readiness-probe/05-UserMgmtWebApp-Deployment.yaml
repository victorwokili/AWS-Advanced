apiVersion: apps/v1
kind: Deployment 
metadata:
  name: usermgmt-webapp  
  labels:
    app: usermgmt-webapp
spec:
  replicas: 1
  selector:
    matchLabels:
      app: usermgmt-webapp
  template:  
    metadata:
      labels: 
        app: usermgmt-webapp
    spec:
      initContainers:
        - name: init-db
          image: busybox:1.31
          command: ['sh', '-c', 'echo -e "Checking for the availability of MySQL Server deployment"; while ! nc -z mysql 3306; do sleep 1; printf "-"; done; echo -e "  >> MySQL DB Server has started";']      
      containers:
        - name: usermgmt-webapp
          image: stacksimplify/kube-usermgmt-webapp:1.0.0-MySQLDB
          ports: 
            - containerPort: 8080           
          env:
            - name: DB_HOSTNAME
              value: "mysql"            
            - name: DB_PORT
              value: "3306"            
            - name: DB_NAME
              value: "webappdb"            
            - name: DB_USERNAME
              value: "root"            
            #- name: DB_PASSWORD
            #  value: "dbpassword11"
            - name: DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mysql-db-password
                  key: db-password 
          # Liveness Probe HTTP Request
          livenessProbe:
            httpGet:
              path: /login
              port: 8080
              httpHeaders:
              - name: Custom-Header
                value: Awesome          
            initialDelaySeconds: 120 # initialDelaySeconds field tells  the kubelet that it should wait 120 seconds before performing the first probe. 
            periodSeconds: 10 # periodSeconds field specifies kubelet should perform a liveness probe every 10 seconds. 
            failureThreshold: 3 # Default Value
            successThreshold: 1 # Default value
          # Readiness Probe HTTP Request            
          readinessProbe:
            httpGet:
              path: /login
              port: 8080
              httpHeaders:
              - name: Custom-Header
                value: Awesome   
            initialDelaySeconds: 60
            periodSeconds: 10
            failureThreshold: 3 # Default Value
            successThreshold: 1 # Default value            

# Understand Readiness Probe ?
# 1. Sometimes, applications are temporarily unable to serve traffic. 
# 2. For example, an application might need to load large data or configuration 
# files during startup, or depend on external services after startup. 
# 3. In such cases, you don't want to kill the application, but you don't 
#  want to send it requests either. 
# 4. Kubernetes provides readiness probes to detect and mitigate these 
# situations. 
# 5. A pod with containers reporting that they are not ready does not 
# receive traffic through Kubernetes Services.
# 6. Readiness probes runs on the container during its whole lifecycle.
# 7. Liveness probes do not wait for readiness probes to succeed. 
# 8. If you want to wait before executing a liveness probe you should use 
# initialDelaySeconds or a startupProbe.
# 9. Readiness and liveness probes can be used in parallel for the same 
# container. 
# 10. Using both can ensure that traffic does not reach a container that 
# is not ready for it, and that containers are restarted when they fail.


